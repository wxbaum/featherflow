"""
Command-line interface for Featherflow
"""
import argparse
import json
import sys
import os
from pathlib import Path
from typing import Dict, List, Optional

from .core import Featherflow

def main():
    """Main entry point for the CLI"""
    parser = argparse.ArgumentParser(description="Featherflow - Ultra-lightweight workflow orchestration")
    
    # Main arguments
    parser.add_argument("--flows-dir", "-f", type=str, default="./flows",
                        help="Directory containing flow JSON files (default: ./flows)")
    parser.add_argument("--tasks-dir", "-t", type=str, default="./tasks",
                        help="Directory containing task scripts (default: ./tasks)")
    parser.add_argument("--output-dir", "-o", type=str, default="./featherflow_output",
                        help="Directory for generated bash scripts and logs (default: ./featherflow_output)")
    parser.add_argument("--log-level", "-l", type=str, default="INFO",
                        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="Logging level (default: INFO)")
    
    # Subcommands
    subparsers = parser.add_subparsers(dest="command", help="Featherflow command")
    
    # List command
    list_parser = subparsers.add_parser("list", help="List available flows")
    
    # Run command
    run_parser = subparsers.add_parser("run", help="Run a flow")
    run_parser.add_argument("flow", type=str, help="Name of the flow to run")
    run_parser.add_argument("--params", "-p", type=str, help="JSON string or path to JSON file with parameters")
    run_parser.add_argument("--dry-run", action="store_true", help="Generate script but don't execute it")
    
    # Parse arguments
    args = parser.parse_args()
    
    # Create Featherflow instance
    try:
        featherflow = Featherflow(
            flows_dir=args.flows_dir,
            tasks_dir=args.tasks_dir,
            output_dir=args.output_dir,
            log_level=args.log_level
        )
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Handle commands
    if args.command == "list":
        flows = featherflow.list_flows()
        if flows:
            print("Available flows:")
            for flow_name in flows:
                print(f"  - {flow_name}")
        else:
            print(f"No flows found in {args.flows_dir}")
    
    elif args.command == "run":
        # Parse params if provided
        params = None
        if args.params:
            if args.params.startswith("{") and args.params.endswith("}"):
                # Parse as JSON string
                try:
                    params = json.loads(args.params)
                except json.JSONDecodeError:
                    print(f"Error: Invalid JSON parameters: {args.params}", file=sys.stderr)
                    sys.exit(1)
            else:
                # Treat as file path
                try:
                    with open(args.params, 'r') as f:
                        params = json.load(f)
                except (json.JSONDecodeError, FileNotFoundError) as e:
                    print(f"Error loading parameters file: {e}", file=sys.stderr)
                    sys.exit(1)
        
        try:
            # Execute the flow
            script_path = featherflow.execute_flow(
                args.flow,
                params=params,
                dry_run=args.dry_run
            )
            
            if args.dry_run:
                print(f"Dry run completed. Bash script generated at: {script_path}")
        except Exception as e:
            print(f"Error executing flow: {e}", file=sys.stderr)
            sys.exit(1)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()